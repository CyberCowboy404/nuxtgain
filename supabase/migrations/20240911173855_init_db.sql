-- Create tables
create table "public"."payments" (
    "id" bigint generated always as identity not null,
    "created_at" timestamp with time zone default now(),
    "count" integer,
    "email" text,
    "payment_id" text,
    "user_id" uuid,
    "payment_link_" text
);

create table "public"."users" (
    "id" uuid not null default gen_random_uuid(),
    "full_name" text,
    "email" text not null,
    "sub_active" boolean default false,
    "sub_end" date,
    "discount_sent" boolean default false,
    "created_at" timestamp with time zone default now()
);

-- New private feedback table
create table "public"."feedback" (
    "id" int8 generated by default as identity primary key,
    "created_at" timestamptz default now(),
    "user_id" uuid,
    "resume_id" int8,
    "email" text,
    "message" text
);

-- Enable RLS
alter table "public"."payments" enable row level security;
alter table "public"."users" enable row level security;
alter table "public"."feedback" enable row level security;

-- Create indexes
CREATE INDEX idx_payments_email ON public.payments USING btree (email);
CREATE INDEX idx_payments_user_id ON public.payments USING btree (user_id);
CREATE INDEX idx_users_email ON public.users USING btree (email);
CREATE UNIQUE INDEX payments_pkey ON public.payments USING btree (id);
CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

-- Add primary key constraints
alter table "public"."payments" add constraint "payments_pkey" PRIMARY KEY using index "payments_pkey";
alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

-- Add foreign key constraints
alter table "public"."payments" add constraint "purchases_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;
alter table "public"."payments" validate constraint "purchases_user_id_fkey";
alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;
alter table "public"."users" validate constraint "users_id_fkey";
alter table "public"."feedback" add constraint "public_feedback_user_id_fkey"foreign key ("user_id") references auth.users(id);

-- Create function for handling new users
set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  INSERT INTO public.users (id, email)
  VALUES (NEW.id, NULLIF(NEW.email, '')::text)
  ON CONFLICT (id) DO UPDATE
  SET email = NULLIF(EXCLUDED.email, '')::text;
  
  RETURN NEW;
END;
$function$
;

-- Create trigger for new user handling
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Grant permissions (restricted)
-- For payments table
grant select on table "public"."payments" to "authenticated";
grant all on table "public"."payments" to "service_role";

-- For users table
grant select on table "public"."users" to "authenticated";
grant update on table "public"."users" to "authenticated";
grant all on table "public"."users" to "service_role";

-- For feedback table
grant all on table "public"."feedback" to "service_role";

-- Create RLS policies
create policy "view_own_payments"
on "public"."payments"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));

create policy "select_own_user"
on "public"."users"
as permissive
for select
to authenticated
using ((auth.uid() = id));

create policy "update_own_user"
on "public"."users"
as permissive
for update
to authenticated
using ((auth.uid() = id));